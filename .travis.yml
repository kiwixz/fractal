language: minimal

services:
    - docker

env:
    global:
        - CACHE_DIR="build/cache"
        - DOCKER_IMAGE="docker_image"

cache:
    directories:
        - "$CACHE_DIR"

before_script:
    - |
        if [[ -f "$CACHE_DIR/docker.tar" ]]; then
            docker load -i "$CACHE_DIR/docker.tar"
        fi
    - docker build -t "$DOCKER_IMAGE" --pull .

before_cache:
    - mkdir -p "$CACHE_DIR"
    - docker save -o "$CACHE_DIR/docker.tar" $(docker history -q "$DOCKER_IMAGE" | grep -v "<" | tail -n +3)


script:
    - |
        docker run --rm "$DOCKER_IMAGE" /bin/bash -c '
            set -e

            echo -e "\n\e[97;44m > Dumping environment... \e[0m"
            pacman --color=always -Q
            vcpkg list

            export CXXFLAGS="-fdiagnostics-color=always -Werror"
            export LDFLAGS="-fdiagnostics-color=always -Werror -fuse-ld=lld"

            echo -e "\n\e[97;44m > Testing debug... \e[0m"
            mkdir -p "build/debug"
            cd "build/debug"
            cmake -G Ninja -D "CMAKE_BUILD_TYPE=Debug" "../.."
            ninja
            ctest --output-on-failure -E "check_.*"
            echo

            echo -e "\n\e[97;44m > Testing release... \e[0m"
            mkdir "../release"
            cd "../release"
            cmake -G Ninja -D "CMAKE_BUILD_TYPE=Release" "../.."
            ninja
            ctest --output-on-failure -E "check_.*"
            echo

            echo -e "\n\e[97;44m > Analyze source code... \e[0m"
            ctest --output-on-failure -R "check_.*"
            echo
        '
